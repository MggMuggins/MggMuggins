import json
from pathlib import Path
import requests
import subprocess
import yaml
import sys

import common

LINGUIST_LANGS = "https://raw.githubusercontent.com/github/linguist/master/lib/linguist/languages.yml"

SVG_FILE = Path("graphic.html")

EXCLUDE_EXTENSIONS = [".json", ".toml", ".bat"]


def svg_start(width, height, style=""):
    return f"""
        <svg version="1.1"
            xmlns="http://www.w3.org/2000/svg"
            width="{width}"
            height="{height}"
            style="{style}">
    """


def svg_end():
    return """</svg>"""


def svg_circle(color):
    return svg_start(20, 20, style="vertical-align: bottom;") + f"""
        <circle cx="10" cy="10" r="5" fill="{color}" />
    """ + svg_end()


def language_list_elem(lang, percent, color):
    return f"""
        <li style="display: inline-flex; flex-wrap: nowrap;">
            {svg_circle(color)}
            <span style="padding-right: 0.2em; padding-left: 0.2em">
                {lang}
            </span>
            <span style="color: gray;">{percent}%</span>
        </li>
    """


proc = subprocess.run(
    [
        "tokei",
        "--output=json",
        common.REPO_DIR,
    ] + ["--exclude=*" + exclude for exclude in EXCLUDE_EXTENSIONS],
    capture_output=True,
)

try:
    repo_info = json.loads(proc.stdout)
except json.JSONDecodeError:
    print("Tokei returned invalid json:")
    print(proc.stdout)
    print(proc.stderr)
    sys.exit(1)

total = repo_info.pop("Total")
print(f"Total code lines: {total['code']}")

percentages = {}

for lang_name, info in repo_info.items():
    print(f"{lang_name} code lines: {info['code']}")
    percentage = info["code"] / total["code"]

    if percentage >= 0.005:
        percentages[lang_name] = round(percentage * 100, 1)

print(json.dumps(percentages, indent=4))

ling_resp = requests.get(LINGUIST_LANGS)
ling_langs = yaml.safe_load(ling_resp.content)

aliases = {}
for lang, info in ling_langs.items():
    aliases[lang.lower()] = lang

    if "aliases" in info:
        for alias in info["aliases"]:
            aliases[alias.lower()] = lang

with open(SVG_FILE, 'w') as svg_file:
    svg_file.write("<!-- THIS FILE WAS GENERATED BY gen_grapic.py -->")
    svg_file.write(svg_start(width="100%", height=20))

    colors = []
    for lang, percent in percentages.items():
        lang = aliases[lang.lower()]
        color = ling_langs[lang]['color']
        colors.append((percent, lang, color))

    colors.sort()
    colors.reverse()

    total_percent = 0
    for percent, lang, color in colors:
        print(f"{lang}: {percent}% {color}")

        svg_file.write(f"""
            <rect x="{total_percent}%" width="{percent}%" height="100%" fill="{color}" />
        """)
        total_percent += percent

    other_percent = 100 - total_percent
    svg_file.write(f"""
        <rect x="{total_percent}%" width="{other_percent}%" height="100%" fill="gray" />
    """)
    svg_file.write(svg_end() + """<ul style="list-style: none; padding-left: 0;">""")

    for percent, lang, color in colors:
        svg_file.write(language_list_elem(lang, percent, color))

    svg_file.write("""</ul>""")
